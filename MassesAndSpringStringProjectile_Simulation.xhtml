<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Masses and Spring Projectile</title>
    <link rel="stylesheet"  type="text/css" href="_ejs_library/css/ejss.css" />
    <script src="_ejs_library/scripts/common_script.js"></script>
    <script src="_ejs_library/scripts/textresizedetector.js"></script>
    <script src="_ejs_library/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function MassesAndSpringStringProjectile(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var showSpring; // EjsS Model.Variables.Dynamical Vars.showSpring
  var x1; // EjsS Model.Variables.Dynamical Vars.x1
  var y1; // EjsS Model.Variables.Dynamical Vars.y1
  var vx1; // EjsS Model.Variables.Dynamical Vars.vx1
  var vy1; // EjsS Model.Variables.Dynamical Vars.vy1
  var x; // EjsS Model.Variables.Dynamical Vars.x
  var y; // EjsS Model.Variables.Dynamical Vars.y
  var vx; // EjsS Model.Variables.Dynamical Vars.vx
  var vy; // EjsS Model.Variables.Dynamical Vars.vy
  var t; // EjsS Model.Variables.Dynamical Vars.t
  var dt; // EjsS Model.Variables.Dynamical Vars.dt

  var g; // EjsS Model.Variables.Constants.g
  var string; // EjsS Model.Variables.Constants.string
  var showPlot; // EjsS Model.Variables.Constants.showPlot
  var m; // EjsS Model.Variables.Constants.m
  var m1; // EjsS Model.Variables.Constants.m1
  var k; // EjsS Model.Variables.Constants.k
  var L0; // EjsS Model.Variables.Constants.L0
  var tmax; // EjsS Model.Variables.Constants.tmax

  var b; // EjsS Model.Variables.Damping and Driving Vars.b
  var amp; // EjsS Model.Variables.Damping and Driving Vars.amp
  var freq; // EjsS Model.Variables.Damping and Driving Vars.freq

  var Dx; // EjsS Model.Variables.Constrained Vars.Dx
  var Dy; // EjsS Model.Variables.Constrained Vars.Dy
  var L; // EjsS Model.Variables.Constrained Vars.L
  var T; // EjsS Model.Variables.Constrained Vars.T
  var V; // EjsS Model.Variables.Constrained Vars.V
  var U; // EjsS Model.Variables.Constrained Vars.U
  var E; // EjsS Model.Variables.Constrained Vars.E
  var Fx; // EjsS Model.Variables.Constrained Vars.Fx
  var Fy; // EjsS Model.Variables.Constrained Vars.Fy

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      showSpring : showSpring,
      x1 : x1,
      y1 : y1,
      vx1 : vx1,
      vy1 : vy1,
      x : x,
      y : y,
      vx : vx,
      vy : vy,
      t : t,
      dt : dt,
      g : g,
      string : string,
      showPlot : showPlot,
      m : m,
      m1 : m1,
      k : k,
      L0 : L0,
      tmax : tmax,
      b : b,
      amp : amp,
      freq : freq,
      Dx : Dx,
      Dy : Dy,
      L : L,
      T : T,
      V : V,
      U : U,
      E : E,
      Fx : Fx,
      Fy : Fy
    };
  };

  function _serializePublic() { return _model.serializePublic(); }

  _model._userSerializePublic = function() {
    return {
      showSpring : showSpring,
      x1 : x1,
      y1 : y1,
      vx1 : vx1,
      vy1 : vy1,
      x : x,
      y : y,
      vx : vx,
      vy : vy,
      t : t,
      dt : dt,
      g : g,
      string : string,
      showPlot : showPlot,
      m : m,
      m1 : m1,
      k : k,
      L0 : L0,
      tmax : tmax,
      b : b,
      amp : amp,
      freq : freq,
      Dx : Dx,
      Dy : Dy,
      L : L,
      T : T,
      V : V,
      U : U,
      E : E,
      Fx : Fx,
      Fy : Fy
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.showSpring != "undefined") showSpring = json.showSpring;
    if(typeof json.x1 != "undefined") x1 = json.x1;
    if(typeof json.y1 != "undefined") y1 = json.y1;
    if(typeof json.vx1 != "undefined") vx1 = json.vx1;
    if(typeof json.vy1 != "undefined") vy1 = json.vy1;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.vx != "undefined") vx = json.vx;
    if(typeof json.vy != "undefined") vy = json.vy;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.g != "undefined") g = json.g;
    if(typeof json.string != "undefined") string = json.string;
    if(typeof json.showPlot != "undefined") showPlot = json.showPlot;
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.m1 != "undefined") m1 = json.m1;
    if(typeof json.k != "undefined") k = json.k;
    if(typeof json.L0 != "undefined") L0 = json.L0;
    if(typeof json.tmax != "undefined") tmax = json.tmax;
    if(typeof json.b != "undefined") b = json.b;
    if(typeof json.amp != "undefined") amp = json.amp;
    if(typeof json.freq != "undefined") freq = json.freq;
    if(typeof json.Dx != "undefined") Dx = json.Dx;
    if(typeof json.Dy != "undefined") Dy = json.Dy;
    if(typeof json.L != "undefined") L = json.L;
    if(typeof json.T != "undefined") T = json.T;
    if(typeof json.V != "undefined") V = json.V;
    if(typeof json.U != "undefined") U = json.U;
    if(typeof json.E != "undefined") E = json.E;
    if(typeof json.Fx != "undefined") Fx = json.Fx;
    if(typeof json.Fy != "undefined") Fy = json.Fy;
  };

  _model._readParametersPublic = function(json) {
    if(typeof json.showSpring != "undefined") showSpring = json.showSpring;
    if(typeof json.x1 != "undefined") x1 = json.x1;
    if(typeof json.y1 != "undefined") y1 = json.y1;
    if(typeof json.vx1 != "undefined") vx1 = json.vx1;
    if(typeof json.vy1 != "undefined") vy1 = json.vy1;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.vx != "undefined") vx = json.vx;
    if(typeof json.vy != "undefined") vy = json.vy;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.g != "undefined") g = json.g;
    if(typeof json.string != "undefined") string = json.string;
    if(typeof json.showPlot != "undefined") showPlot = json.showPlot;
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.m1 != "undefined") m1 = json.m1;
    if(typeof json.k != "undefined") k = json.k;
    if(typeof json.L0 != "undefined") L0 = json.L0;
    if(typeof json.tmax != "undefined") tmax = json.tmax;
    if(typeof json.b != "undefined") b = json.b;
    if(typeof json.amp != "undefined") amp = json.amp;
    if(typeof json.freq != "undefined") freq = json.freq;
    if(typeof json.Dx != "undefined") Dx = json.Dx;
    if(typeof json.Dy != "undefined") Dy = json.Dy;
    if(typeof json.L != "undefined") L = json.L;
    if(typeof json.T != "undefined") T = json.T;
    if(typeof json.V != "undefined") V = json.V;
    if(typeof json.U != "undefined") U = json.U;
    if(typeof json.E != "undefined") E = json.E;
    if(typeof json.Fx != "undefined") Fx = json.Fx;
    if(typeof json.Fy != "undefined") Fy = json.Fy;
  };

  function _unserializePublic(json) { return _model.unserializePublic(json); }

  _model._userUnserializePublic = function(json) {
    _model._readParametersPublic(json);
   _resetSolvers();
   _model.update();
  };

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["GraphAxes"] = true;
    __pagesEnabled["Equations"] = true;
    __pagesEnabled["EndEvent"] = true;
    __pagesEnabled["Energy"] = true;
  });

  _model.addToReset(function() {
    showSpring = true; // EjsS Model.Variables.Dynamical Vars.showSpring
    x1 = -0.5; // EjsS Model.Variables.Dynamical Vars.x1
    y1 = 0; // EjsS Model.Variables.Dynamical Vars.y1
    vx1 = 0; // EjsS Model.Variables.Dynamical Vars.vx1
    vy1 = 0; // EjsS Model.Variables.Dynamical Vars.vy1
    x = 0; // EjsS Model.Variables.Dynamical Vars.x
    y = 0; // EjsS Model.Variables.Dynamical Vars.y
    vx = 0; // EjsS Model.Variables.Dynamical Vars.vx
    vy = 0; // EjsS Model.Variables.Dynamical Vars.vy
    t = 0; // EjsS Model.Variables.Dynamical Vars.t
    dt = 0.005; // EjsS Model.Variables.Dynamical Vars.dt
  });

  _model.addToReset(function() {
    g = 0; // EjsS Model.Variables.Constants.g
    string = false; // EjsS Model.Variables.Constants.string
    showPlot = true; // EjsS Model.Variables.Constants.showPlot
    m = 1.0; // EjsS Model.Variables.Constants.m
    m1 = 3; // EjsS Model.Variables.Constants.m1
    k = 5; // EjsS Model.Variables.Constants.k
    L0 = 0.5; // EjsS Model.Variables.Constants.L0
    tmax = 30; // EjsS Model.Variables.Constants.tmax
  });

  _model.addToReset(function() {
    b = 0.02; // EjsS Model.Variables.Damping and Driving Vars.b
    amp = 0.0; // EjsS Model.Variables.Damping and Driving Vars.amp
    freq = 0.0; // EjsS Model.Variables.Damping and Driving Vars.freq
  });

  _model.addToReset(function() {
    Dx = x-x1; // EjsS Model.Variables.Constrained Vars.Dx
    Dy = y-y1; // EjsS Model.Variables.Constrained Vars.Dy
    L = Math.sqrt(Dx*Dx+Dy*Dy); // EjsS Model.Variables.Constrained Vars.L
    T = 0.5*m*(vx*vx+vy*vy)+0.5*m1*(vx1*vx1+vy1*vy1); // EjsS Model.Variables.Constrained Vars.T
    V = 0.5*k*(L-L0)*(L-L0); // EjsS Model.Variables.Constrained Vars.V
    U = m*g*y+m1*g*y1; // EjsS Model.Variables.Constrained Vars.U
    E = T + V + U; // EjsS Model.Variables.Constrained Vars.E
    Fx = 0; // EjsS Model.Variables.Constrained Vars.Fx
    Fy = 0; // EjsS Model.Variables.Constrained Vars.Fy
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(20);
  });

  function freefallaccln(time) {  // > CustomCode.Force:1
    return -g;   // > CustomCode.Force:2
    //return amp*Math.sin(freq*time);   // > CustomCode.Force:3
  }  // > CustomCode.Force:4

  _model.addToInitialization(function() {
    if (!__pagesEnabled["GraphAxes"]) return;
    //position-time  // > Initialization.GraphAxes:1
    _view.plottingPanel.getAxisX().setPosition([0.0,0.5]);  // > Initialization.GraphAxes:2
    _view.plottingPanel.getTitleX().setPosition([0.05,0.5]);  // > Initialization.GraphAxes:3
    _view.plottingPanel.getAxisY().setPosition([1,0]);  // > Initialization.GraphAxes:4
    _view.plottingPanel.getTitleY().setPosition([1,0.65]);  // > Initialization.GraphAxes:5
    //velocity-time  // > Initialization.GraphAxes:6
    _view.plottingPanel2.getAxisX().setPosition([0.0,0.5]);  // > Initialization.GraphAxes:7
    _view.plottingPanel2.getTitleX().setPosition([0.05,0.5]);  // > Initialization.GraphAxes:8
    _view.plottingPanel2.getAxisY().setPosition([1,0]);  // > Initialization.GraphAxes:9
    _view.plottingPanel2.getTitleY().setPosition([1,0.65]);  // > Initialization.GraphAxes:10
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Equations"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["Energy"]) return;
    Dy=y-y1;  // > FixedRelations.Energy:1
    Dx=x-x1;  // > FixedRelations.Energy:2
    L=Math.sqrt(Dx*Dx+Dy*Dy);  // > FixedRelations.Energy:3
    T=0.5*m*(vx*vx+vy*vy)+0.5*m1*(vx1*vx1+vy1*vy1);  // > FixedRelations.Energy:4
    U=m*g*y+m1*g*y1;  // > FixedRelations.Energy:5
    //figure out x-component acting due to x1 on x  // > FixedRelations.Energy:6
    //also elastic potential energy  // > FixedRelations.Energy:7
    if (string && L<L0) {  // > FixedRelations.Energy:8
        V = 0;  // > FixedRelations.Energy:9
        Fx = 0;  // > FixedRelations.Energy:10
        Fy = 0;  // > FixedRelations.Energy:11
        showSpring = false;  // > FixedRelations.Energy:12
    } else {   // > FixedRelations.Energy:13
        V = 0.5*k*(L-L0)*(L-L0);  // > FixedRelations.Energy:14
        Fx = -k*(L-L0)*Dx/L-b*(vx-vx1);  // > FixedRelations.Energy:15
        Fy = -k*(L-L0)*Dy/L-b*(vy-vy1);  // > FixedRelations.Energy:16
        showSpring = true;  // > FixedRelations.Energy:17
    }  // > FixedRelations.Energy:18
    E=T+V+U;  // > FixedRelations.Energy:19
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Equations") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.rungeKutta4;
    var __state=[];
    var _ODE_evolution1_Event1;
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["x","x1","y","y1","vx","vy","vx1","vy1","t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      if (__pagesEnabled["EndEvent"]) __eventSolver.addEvent(_ODE_evolution1_Event1());
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=x) __mustReinitialize = true;
        __state[__cIn++] = x;
        if (__state[__cIn]!=x1) __mustReinitialize = true;
        __state[__cIn++] = x1;
        if (__state[__cIn]!=y) __mustReinitialize = true;
        __state[__cIn++] = y;
        if (__state[__cIn]!=y1) __mustReinitialize = true;
        __state[__cIn++] = y1;
        if (__state[__cIn]!=vx) __mustReinitialize = true;
        __state[__cIn++] = vx;
        if (__state[__cIn]!=vy) __mustReinitialize = true;
        __state[__cIn++] = vy;
        if (__state[__cIn]!=vx1) __mustReinitialize = true;
        __state[__cIn++] = vx1;
        if (__state[__cIn]!=vy1) __mustReinitialize = true;
        __state[__cIn++] = vy1;
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        x = __state[__cOut++];
        x1 = __state[__cOut++];
        y = __state[__cOut++];
        y1 = __state[__cOut++];
        vx = __state[__cOut++];
        vy = __state[__cOut++];
        vx1 = __state[__cOut++];
        vy1 = __state[__cOut++];
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = _aState[__cOut++];
        var x1 = _aState[__cOut++];
        var y = _aState[__cOut++];
        var y1 = _aState[__cOut++];
        var vx = _aState[__cOut++];
        var vy = _aState[__cOut++];
        var vx1 = _aState[__cOut++];
        var vy1 = _aState[__cOut++];
        var t = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = vx; // Rate for ODE: Equations:x
        _aRate[__cRate++] = vx1; // Rate for ODE: Equations:x1
        _aRate[__cRate++] = vy; // Rate for ODE: Equations:y
        _aRate[__cRate++] = vy1; // Rate for ODE: Equations:y1
        _aRate[__cRate++] = Fx/m; // Rate for ODE: Equations:vx
        _aRate[__cRate++] = Fy/m + freefallaccln(t); // Rate for ODE: Equations:vy
        _aRate[__cRate++] = -Fx/m1; // Rate for ODE: Equations:vx1
        _aRate[__cRate++] = -Fy/m1 + freefallaccln(t); // Rate for ODE: Equations:vy1
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = _aState[__cOut++];
        var x1 = _aState[__cOut++];
        var y = _aState[__cOut++];
        var y1 = _aState[__cOut++];
        var vx = _aState[__cOut++];
        var vy = _aState[__cOut++];
        var vx1 = _aState[__cOut++];
        var vy1 = _aState[__cOut++];
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        x = __state[__cOut++];
        x1 = __state[__cOut++];
        y = __state[__cOut++];
        y1 = __state[__cOut++];
        vx = __state[__cOut++];
        vy = __state[__cOut++];
        vx1 = __state[__cOut++];
        vy1 = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = x;
        __state[__cIn++] = x1;
        __state[__cIn++] = y;
        __state[__cIn++] = y1;
        __state[__cIn++] = vx;
        __state[__cIn++] = vy;
        __state[__cIn++] = vx1;
        __state[__cIn++] = vy1;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    _ODE_evolution1_Event1 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.STATE_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = _aState[__cOut++];
        var x1 = _aState[__cOut++];
        var y = _aState[__cOut++];
        var y1 = _aState[__cOut++];
        var vx = _aState[__cOut++];
        var vy = _aState[__cOut++];
        var vx1 = _aState[__cOut++];
        var vy1 = _aState[__cOut++];
        var t = _aState[__cOut++];
        return tmax-t;  // > Event zero-condition for page Equations:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        x = __state[__cOut++];
        x1 = __state[__cOut++];
        y = __state[__cOut++];
        y1 = __state[__cOut++];
        vx = __state[__cOut++];
        vy = __state[__cOut++];
        vx1 = __state[__cOut++];
        vy1 = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = x;
        __state[__cIn++] = x1;
        __state[__cIn++] = y;
        __state[__cIn++] = y1;
        __state[__cIn++] = vx;
        __state[__cIn++] = vy;
        __state[__cIn++] = vx1;
        __state[__cIn++] = vy1;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        return true;
      }

      return _eventSelf;
    }; // End of event

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_x(__time) {
    var __index = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_x1(__time) {
    var __index = 0 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_y(__time) {
    var __index = 0 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_y1(__time) {
    var __index = 0 + 1 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_vx(__time) {
    var __index = 0 + 1 + 1 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_vy(__time) {
    var __index = 0 + 1 + 1 + 1 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_vx1(__time) {
    var __index = 0 + 1 + 1 + 1 + 1 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_vy1(__time) {
    var __index = 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 1024, height : 768 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new MassesAndSpringStringProjectile_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.drawingPanel.linkProperty("TLMessage",  function() { return "time="+_view._format(t,"0.0"); } ); // HtmlView Page linking property 'TLMessage' for element 'drawingPanel'
          _view.massShape1.linkProperty("SizeX",  function() { return 0.1*Math.sqrt(m1); } ); // HtmlView Page linking property 'SizeX' for element 'massShape1'
          _view.massShape1.linkProperty("X",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'X' for element 'massShape1'
          _view.massShape1.linkProperty("Y",  function() { return y1; }, function(_v) { y1 = _v; } ); // HtmlView Page linking property 'Y' for element 'massShape1'
          _view.massShape1.linkProperty("SizeY",  function() { return 0.1*Math.sqrt(m1); } ); // HtmlView Page linking property 'SizeY' for element 'massShape1'
          _view.trail1.linkProperty("InputX",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'InputX' for element 'trail1'
          _view.trail1.linkProperty("InputY",  function() { return y1; }, function(_v) { y1 = _v; } ); // HtmlView Page linking property 'InputY' for element 'trail1'
          _view.trail1.linkProperty("ClearAtInput",  function() { return _isPaused; } ); // HtmlView Page linking property 'ClearAtInput' for element 'trail1'
          _view.spring.linkProperty("SizeX",  function() { return x-x1; } ); // HtmlView Page linking property 'SizeX' for element 'spring'
          _view.spring.linkProperty("X",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'X' for element 'spring'
          _view.spring.linkProperty("Y",  function() { return y1; }, function(_v) { y1 = _v; } ); // HtmlView Page linking property 'Y' for element 'spring'
          _view.spring.linkProperty("Visibility",  function() { return showSpring; }, function(_v) { showSpring = _v; } ); // HtmlView Page linking property 'Visibility' for element 'spring'
          _view.spring.linkProperty("SizeY",  function() { return y-y1; } ); // HtmlView Page linking property 'SizeY' for element 'spring'
          _view.massShape.linkProperty("SizeX",  function() { return 0.1*Math.sqrt(m); } ); // HtmlView Page linking property 'SizeX' for element 'massShape'
          _view.massShape.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'massShape'
          _view.massShape.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'massShape'
          _view.massShape.linkProperty("SizeY",  function() { return 0.1*Math.sqrt(m); } ); // HtmlView Page linking property 'SizeY' for element 'massShape'
          _view.trail.linkProperty("InputX",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'InputX' for element 'trail'
          _view.trail.linkProperty("InputY",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'InputY' for element 'trail'
          _view.trail.linkProperty("ClearAtInput",  function() { return _isPaused; } ); // HtmlView Page linking property 'ClearAtInput' for element 'trail'
          _view.shapeCM.linkProperty("X",  function() { return (m1*x1+m*x)/(m1+m); } ); // HtmlView Page linking property 'X' for element 'shapeCM'
          _view.shapeCM.linkProperty("Y",  function() { return (m1*y1+m*y)/(m1+m); } ); // HtmlView Page linking property 'Y' for element 'shapeCM'
          _view.trailCM.linkProperty("InputX",  function() { return (m*x+m1*x1)/(m+m1); } ); // HtmlView Page linking property 'InputX' for element 'trailCM'
          _view.trailCM.linkProperty("InputY",  function() { return (m*y+m1*y1)/(m+m1); } ); // HtmlView Page linking property 'InputY' for element 'trailCM'
          _view.trailCM.linkProperty("ClearAtInput",  function() { return _isPaused; } ); // HtmlView Page linking property 'ClearAtInput' for element 'trailCM'
          _view.arrowVel.linkProperty("SizeX",  function() { return vx; }, function(_v) { vx = _v; } ); // HtmlView Page linking property 'SizeX' for element 'arrowVel'
          _view.arrowVel.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'arrowVel'
          _view.arrowVel.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'arrowVel'
          _view.arrowVel.linkProperty("SizeY",  function() { return vy; }, function(_v) { vy = _v; } ); // HtmlView Page linking property 'SizeY' for element 'arrowVel'
          _view.VelShape.setAction("OnRelease", _play); // HtmlView Page setting action 'OnRelease' for element 'VelShape'
          _view.VelShape.linkProperty("X",  function() { return vx; }, function(_v) { vx = _v; } ); // HtmlView Page linking property 'X' for element 'VelShape'
          _view.VelShape.linkProperty("Y",  function() { return vy; }, function(_v) { vy = _v; } ); // HtmlView Page linking property 'Y' for element 'VelShape'
          _view.VelShape.setAction("OnDrag", _pause); // HtmlView Page setting action 'OnDrag' for element 'VelShape'
          _view.text.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'text'
          _view.text.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'text'
          _view.text.linkProperty("Visibility",  function() { return _isPaused; } ); // HtmlView Page linking property 'Visibility' for element 'text'
          _view.arrowY.linkProperty("Visibility",  function() { return _isPaused; } ); // HtmlView Page linking property 'Visibility' for element 'arrowY'
          _view.arrowX.linkProperty("Visibility",  function() { return _isPaused; } ); // HtmlView Page linking property 'Visibility' for element 'arrowX'
          _view.plottingPanel.linkProperty("MaximumX",  function() { return tmax; }, function(_v) { tmax = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'plottingPanel'
          _view.x1Trail.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'x1Trail'
          _view.x1Trail.linkProperty("InputY",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'InputY' for element 'x1Trail'
          _view.y1Trail.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'y1Trail'
          _view.y1Trail.linkProperty("InputY",  function() { return y1; }, function(_v) { y1 = _v; } ); // HtmlView Page linking property 'InputY' for element 'y1Trail'
          _view.xTrail.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'xTrail'
          _view.xTrail.linkProperty("InputY",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'InputY' for element 'xTrail'
          _view.yTrail.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'yTrail'
          _view.yTrail.linkProperty("InputY",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'InputY' for element 'yTrail'
          _view.plottingPanel2.linkProperty("MaximumX",  function() { return tmax; }, function(_v) { tmax = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'plottingPanel2'
          _view.vx1Trail.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'vx1Trail'
          _view.vx1Trail.linkProperty("InputY",  function() { return vx1; }, function(_v) { vx1 = _v; } ); // HtmlView Page linking property 'InputY' for element 'vx1Trail'
          _view.vy1Trail.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'vy1Trail'
          _view.vy1Trail.linkProperty("InputY",  function() { return vy1; }, function(_v) { vy1 = _v; } ); // HtmlView Page linking property 'InputY' for element 'vy1Trail'
          _view.vxTrail.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'vxTrail'
          _view.vxTrail.linkProperty("InputY",  function() { return vx; }, function(_v) { vx = _v; } ); // HtmlView Page linking property 'InputY' for element 'vxTrail'
          _view.vyTrail.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'vyTrail'
          _view.vyTrail.linkProperty("InputY",  function() { return vy; }, function(_v) { vy = _v; } ); // HtmlView Page linking property 'InputY' for element 'vyTrail'
          _view.playPauseButton.setAction("OffClick", _pause); // HtmlView Page setting action 'OffClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'playPauseButton'
          _view.playPauseButton.setAction("OnClick", _play); // HtmlView Page setting action 'OnClick' for element 'playPauseButton'
          _view.stepButton.setAction("OnClick", function(_data,_info) {
  _step();

}); // HtmlView Page setting action 'OnClick' for element 'stepButton'
          _view.resetButton.setAction("OnClick", function(_data,_info) {
  _reset();

}); // HtmlView Page setting action 'OnClick' for element 'resetButton'
          _view.checkBoxGravity.setAction("OnCheckOff", function(_data,_info) {
  g=0;

}); // HtmlView Page setting action 'OnCheckOff' for element 'checkBoxGravity'
          _view.checkBoxGravity.setAction("OnCheckOn", function(_data,_info) {
  g=0.1;

}); // HtmlView Page setting action 'OnCheckOn' for element 'checkBoxGravity'
          _view.checkBoxString.setAction("OnCheckOff", function(_data,_info) {
  string=false;

}); // HtmlView Page setting action 'OnCheckOff' for element 'checkBoxString'
          _view.checkBoxString.setAction("OnCheckOn", function(_data,_info) {
  string=true;

}); // HtmlView Page setting action 'OnCheckOn' for element 'checkBoxString'
          _view.sliderMass.linkProperty("Value",  function() { return m1; }, function(_v) { m1 = _v; } ); // HtmlView Page linking property 'Value' for element 'sliderMass'
          _view.KSlider.setAction("OnRelease", _update); // HtmlView Page setting action 'OnRelease' for element 'KSlider'
          _view.KSlider.linkProperty("Value",  function() { return k; }, function(_v) { k = _v; } ); // HtmlView Page linking property 'Value' for element 'KSlider'
          _view.dampSlider.setAction("OnRelease", _update); // HtmlView Page setting action 'OnRelease' for element 'dampSlider'
          _view.dampSlider.linkProperty("Value",  function() { return b; }, function(_v) { b = _v; } ); // HtmlView Page linking property 'Value' for element 'dampSlider'
          _view.EnergyPlottingPanel.linkProperty("MaximumX",  function() { return tmax; }, function(_v) { tmax = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'EnergyPlottingPanel'
          _view.Total.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'Total'
          _view.Total.linkProperty("InputY",  function() { return E; }, function(_v) { E = _v; } ); // HtmlView Page linking property 'InputY' for element 'Total'
          _view.Elastic.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'Elastic'
          _view.Elastic.linkProperty("InputY",  function() { return V; }, function(_v) { V = _v; } ); // HtmlView Page linking property 'InputY' for element 'Elastic'
          _view.Gravitational.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'Gravitational'
          _view.Gravitational.linkProperty("InputY",  function() { return U; }, function(_v) { U = _v; } ); // HtmlView Page linking property 'InputY' for element 'Gravitational'
          _view.Kinetic.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'Kinetic'
          _view.Kinetic.linkProperty("InputY",  function() { return T; }, function(_v) { T = _v; } ); // HtmlView Page linking property 'InputY' for element 'Kinetic'
          _view.XphaseSpaceTrail2D.linkProperty("InputX",  function() { return x-x1; } ); // HtmlView Page linking property 'InputX' for element 'XphaseSpaceTrail2D'
          _view.XphaseSpaceTrail2D.linkProperty("InputY",  function() { return vx-vx1; } ); // HtmlView Page linking property 'InputY' for element 'XphaseSpaceTrail2D'
          _view.YphaseSpaceTrail2D.linkProperty("InputX",  function() { return y-y1; } ); // HtmlView Page linking property 'InputX' for element 'YphaseSpaceTrail2D'
          _view.YphaseSpaceTrail2D.linkProperty("InputY",  function() { return vy-vy1; } ); // HtmlView Page linking property 'InputY' for element 'YphaseSpaceTrail2D'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(20);
  _selectView(_model._autoSelectView(_getViews())); // this includes _model.reset()
  return _model;
}

function MassesAndSpringStringProjectile_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = MassesAndSpringStringProjectile_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('Introduction','./MassesAndSpringStringProjectile_Intro_1.html');
  _view._addDescriptionPage('Activities','./MassesAndSpringStringProjectile_Intro_2.html');

  return _view;
} // end of main function

function MassesAndSpringStringProjectile_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"labelPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'labelPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"label", _view.labelPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'label'
      .setProperty("Foreground","Black") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'label'
      .setProperty("Text","Masses and Spring Projectile") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'label'
      .setProperty("Font","normal bold 30px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'label'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"centerPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'centerPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'centerPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.drawingPanel,"drawingPanel", _view.centerPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'drawingPanel'
      .setProperty("Height",500) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'drawingPanel'
      .setProperty("Width","50%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'drawingPanel'
      .setProperty("MinimumX",-0.5) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'drawingPanel'
      .setProperty("MinimumY",-1) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'drawingPanel'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'drawingPanel'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'drawingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'drawingPanel'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'drawingPanel'
      .setProperty("MaximumY",1) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'drawingPanel'
      .setProperty("MaximumX",5) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'drawingPanel'
      .setProperty("Display","inline-block") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'drawingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"massShape1", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'massShape1'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'massShape1'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"trail1", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'trail1'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trail1'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trail1'
      ;

    _view._addElement(EJSS_DRAWING2D.spring,"spring", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'spring'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"massShape", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'massShape'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'massShape'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"trail", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'trail'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trail'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trail'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shapeCM", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'shapeCM'
      .setProperty("FillColor","rgba(200,220,208,1)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shapeCM'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shapeCM'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'shapeCM'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"trailCM", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'trailCM'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trailCM'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trailCM'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"arrowVel", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowVel'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowVel'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'arrowVel'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowVel'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"VelShape", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'VelShape'
      .setProperty("DrawLines",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'VelShape'
      .setProperty("DrawFill",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'VelShape'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'VelShape'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"text", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'text'
      .setProperty("RelativePosition","NORTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'text'
      .setProperty("Text","Drag me") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'text'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"arrowY", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowY'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrowY'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowY'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'arrowY'
      .setProperty("Y",1.5) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'arrowY'
      .setProperty("SizeY",0.4) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrowY'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowY'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"arrowX", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowX'
      .setProperty("SizeX",0.4) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrowX'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowX'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'arrowX'
      .setProperty("Y",1.5) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'arrowX'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrowX'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view.centerPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      .setProperty("Width","50%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'panel'
      .setProperty("Display","inline-block") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'panel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Height",250) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'plottingPanel'
      .setProperty("TRMessage","thin: horizontal \n thick: vertical \n (colours correspond with masses)") // EJsS HtmlView.HtmlView Page: setting property 'TRMessage' for element 'plottingPanel'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("MinimumX",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanel'
      .setProperty("TitleY","Position") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'plottingPanel'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("TitleX","Time") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'plottingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      .setProperty("Title","") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'plottingPanel'
      .setProperty("Display","block") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"x1Trail", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'x1Trail'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'x1Trail'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"y1Trail", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'y1Trail'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'y1Trail'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'y1Trail'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"xTrail", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'xTrail'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'xTrail'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"yTrail", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'yTrail'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'yTrail'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'yTrail'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel2", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel2'
      .setProperty("Height",250) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel2'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'plottingPanel2'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel2'
      .setProperty("MinimumX",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanel2'
      .setProperty("TitleY","Velocity") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'plottingPanel2'
      .setProperty("TitleX","Time") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'plottingPanel2'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel2'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel2'
      .setProperty("Title","") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'plottingPanel2'
      .setProperty("Display","block") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'plottingPanel2'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"vx1Trail", _view.plottingPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'vx1Trail'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'vx1Trail'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"vy1Trail", _view.plottingPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'vy1Trail'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'vy1Trail'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'vy1Trail'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"vxTrail", _view.plottingPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'vxTrail'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'vxTrail'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"vyTrail", _view.plottingPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'vyTrail'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'vyTrail'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'vyTrail'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"controlPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'controlPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'controlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton'
      .setProperty("ImageOnUrl","/org/opensourcephysics/resources/controls/images/play.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOnUrl' for element 'playPauseButton'
      .setProperty("ImageOffUrl","/org/opensourcephysics/resources/controls/images/pause.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOffUrl' for element 'playPauseButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"stepButton", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'stepButton'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/stepforward.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'stepButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/reset.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"checkBoxGravity", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'checkBoxGravity'
      .setProperty("Checked",false) // EJsS HtmlView.HtmlView Page: setting property 'Checked' for element 'checkBoxGravity'
      .setProperty("Text","Gravity?") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'checkBoxGravity'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"checkBoxString", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'checkBoxString'
      .setProperty("Checked",false) // EJsS HtmlView.HtmlView Page: setting property 'Checked' for element 'checkBoxString'
      .setProperty("Text","String-like?") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'checkBoxString'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panelMass", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'panelMass'
      .setProperty("BorderColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'BorderColor' for element 'panelMass'
      .setProperty("BorderWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'BorderWidth' for element 'panelMass'
      .setProperty("Display","inline-block") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'panelMass'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"labelMass", _view.panelMass) // EJsS HtmlView.HtmlView Page: declaration of element 'labelMass'
      .setProperty("Text","m1/m = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'labelMass'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"sliderMass", _view.panelMass) // EJsS HtmlView.HtmlView Page: declaration of element 'sliderMass'
      .setProperty("Minimum",0.1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'sliderMass'
      .setProperty("Maximum",10) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'sliderMass'
      .setProperty("ShowText",true) // EJsS HtmlView.HtmlView Page: setting property 'ShowText' for element 'sliderMass'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'sliderMass'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panelSpring", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'panelSpring'
      .setProperty("BorderColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'BorderColor' for element 'panelSpring'
      .setProperty("BorderWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'BorderWidth' for element 'panelSpring'
      .setProperty("Display","inline-block") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'panelSpring'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"kLabel", _view.panelSpring) // EJsS HtmlView.HtmlView Page: declaration of element 'kLabel'
      .setProperty("Text","k =") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'kLabel'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"KSlider", _view.panelSpring) // EJsS HtmlView.HtmlView Page: declaration of element 'KSlider'
      .setProperty("Minimum",0.1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'KSlider'
      .setProperty("Maximum",10) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'KSlider'
      .setProperty("ShowText",true) // EJsS HtmlView.HtmlView Page: setting property 'ShowText' for element 'KSlider'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'KSlider'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"dampLabel", _view.panelSpring) // EJsS HtmlView.HtmlView Page: declaration of element 'dampLabel'
      .setProperty("Text","damping coeff =") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'dampLabel'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"dampSlider", _view.panelSpring) // EJsS HtmlView.HtmlView Page: declaration of element 'dampSlider'
      .setProperty("Minimum",0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'dampSlider'
      .setProperty("Maximum",0.5) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'dampSlider'
      .setProperty("ShowText",true) // EJsS HtmlView.HtmlView Page: setting property 'ShowText' for element 'dampSlider'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'dampSlider'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panelEnergy", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'panelEnergy'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'panelEnergy'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"EnergyPlottingPanel", _view.panelEnergy) // EJsS HtmlView.HtmlView Page: declaration of element 'EnergyPlottingPanel'
      .setProperty("Height",350) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'EnergyPlottingPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'EnergyPlottingPanel'
      .setProperty("TRMessage","blue: kinetic energy \n red: grav. pot. \n black (thin): elastic pot. \n black (thick): total energy") // EJsS HtmlView.HtmlView Page: setting property 'TRMessage' for element 'EnergyPlottingPanel'
      .setProperty("MinimumX",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'EnergyPlottingPanel'
      .setProperty("TitleY","Energy") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'EnergyPlottingPanel'
      .setProperty("TitleX","Time") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'EnergyPlottingPanel'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'EnergyPlottingPanel'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'EnergyPlottingPanel'
      .setProperty("Title","Energy against Time") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'EnergyPlottingPanel'
      .setProperty("TitleFont","normal bold 12px ") // EJsS HtmlView.HtmlView Page: setting property 'TitleFont' for element 'EnergyPlottingPanel'
      .setProperty("Display","inline-block") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'EnergyPlottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"Total", _view.EnergyPlottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Total'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Total'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'Total'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'Total'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"Elastic", _view.EnergyPlottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Elastic'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Elastic'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'Elastic'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"Gravitational", _view.EnergyPlottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Gravitational'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Gravitational'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'Gravitational'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"Kinetic", _view.EnergyPlottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Kinetic'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Kinetic'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'Kinetic'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panelPhaseSpace", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'panelPhaseSpace'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'panelPhaseSpace'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"XphaseSpacePlottingPanel", _view.panelPhaseSpace) // EJsS HtmlView.HtmlView Page: declaration of element 'XphaseSpacePlottingPanel'
      .setProperty("Height",350) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'XphaseSpacePlottingPanel'
      .setProperty("Width","50%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'XphaseSpacePlottingPanel'
      .setProperty("MinimumX",-1) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'XphaseSpacePlottingPanel'
      .setProperty("MinimumY",-1) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'XphaseSpacePlottingPanel'
      .setProperty("TitleY","Relative Velocity") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'XphaseSpacePlottingPanel'
      .setProperty("TitleX","Relative Displacement") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'XphaseSpacePlottingPanel'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'XphaseSpacePlottingPanel'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'XphaseSpacePlottingPanel'
      .setProperty("Title","Phase Space for Relative Motion (Horizontal Direction)") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'XphaseSpacePlottingPanel'
      .setProperty("TitleFont","normal bold 12px ") // EJsS HtmlView.HtmlView Page: setting property 'TitleFont' for element 'XphaseSpacePlottingPanel'
      .setProperty("MaximumY",1) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'XphaseSpacePlottingPanel'
      .setProperty("MaximumX",1) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'XphaseSpacePlottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"XphaseSpaceTrail2D", _view.XphaseSpacePlottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'XphaseSpaceTrail2D'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'XphaseSpaceTrail2D'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"YphaseSpacePlottingPanel", _view.panelPhaseSpace) // EJsS HtmlView.HtmlView Page: declaration of element 'YphaseSpacePlottingPanel'
      .setProperty("Height",350) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'YphaseSpacePlottingPanel'
      .setProperty("Width","50%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'YphaseSpacePlottingPanel'
      .setProperty("Title","Phase Space for Relative Motion (Vertical Direction)") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'YphaseSpacePlottingPanel'
      .setProperty("MaximumY",1) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'YphaseSpacePlottingPanel'
      .setProperty("MaximumX",1) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'YphaseSpacePlottingPanel'
      .setProperty("MinimumX",-1) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'YphaseSpacePlottingPanel'
      .setProperty("MinimumY",-1) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'YphaseSpacePlottingPanel'
      .setProperty("TitleY","Relative Velocity") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'YphaseSpacePlottingPanel'
      .setProperty("TitleX","Relative Displacement") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'YphaseSpacePlottingPanel'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'YphaseSpacePlottingPanel'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'YphaseSpacePlottingPanel'
      .setProperty("TitleFont","normal bold 12px ") // EJsS HtmlView.HtmlView Page: setting property 'TitleFont' for element 'YphaseSpacePlottingPanel'
      .setProperty("Display","inline-block") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'YphaseSpacePlottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"YphaseSpaceTrail2D", _view.YphaseSpacePlottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'YphaseSpaceTrail2D'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'YphaseSpaceTrail2D'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Masses and Spring Projectile<br />
     <img alt="Logo" src="MassAndSpring/masses-spring-projectile-screenshot-small.png" />
      </p>
      <p>
      <img alt="author image" src="MassAndSpring/WC_logo.png" />
      <img alt="author image" src="MassAndSpring/PacoEsquembre2011.png" />
      <img alt="author image" src="MassAndSpring/ScienceSamuraiDarrenTanSquareSmall.png" />
 Wolfgang Christian; Francisco Esquembre; Zhiming Darren TAN
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2020, Open Source Physics. Compiled with EJS 6.0 (201009)
</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="_ejs_library/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new MassesAndSpringStringProjectile("_topFrame","_ejs_library/",null);
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
